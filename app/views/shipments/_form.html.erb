  
<%= form_for @shipment do |f| %>
 <% if @shipment.errors.any? %>
   <div id="error_explanation" class="form_errors">
    <h2> <%= t :error_header %> </h2>
    <ul>
    <% @customer_shipping_order.errors.full_messages.each do |msg| %>
      <li><%= msg %></li>
    <% end %>
    </ul>
  </div>
  <%else%>
    <div id="error_explanation" class="form_errors" style="display:none">
      <h2> <%= t :error_header %> </h2>
      <ul id="error_list">
      
      </ul>
    </div>
  
  <% end %>
    
  <%= f.hidden_field :shipping_request_id %>   
  
  <%= f.hidden_field :departure_time %>  
  <%= hidden_field_tag :dep_date %>  
  <%= f.hidden_field :arrival_time %> 
  <%= hidden_field_tag :arv_date %>  
  
  <%= hidden_field_tag "back_option", @back_option %> 
  
  <table class="tabla_campos" cellpadding=0 cellspacing=0>
   <tr>
    <th><%= f.label :customer %></th>
    <td> <%= @shipping_request.customer_shipping_order.customer.name %> </td>	
  </tr>
  <tr>
    <th><%= f.label :customer_shipping_order_number %></th>
    <td> <%= @shipping_request.customer_shipping_order.order_number %> </td>	
  </tr>
  <tr>
    <th><%= f.label :shipping_request_description %></th>
    <td> <%= @shipping_request.service.description %> </td>	
  </tr>
  <tr>
    <th><%= f.label :shipping_request_trip %></th>
    <td> <%= @shipping_request.trip.description %>  (<%=@shipping_request.trip.duration_minutes %> min) </td>	
  </tr>
  <tr>
    <th><%= f.label :status %></th>
    <td> <%= f.select  :status, [['Agendado', 1], ['En Curso', 2], ['Completado', 3], ['Para Facturar', 4],  ['Finalizado', 5], ['Cancelado', 6]] %>  </td>
  </tr>   
  
   <tr>
    <th><%= f.label :departure_time %></th>
    <td> <input type="text" id="dep_date_dp" class="campo_fecha_hora"/> &nbsp;-&nbsp; <%= select_time @shipment.departure_time, prefix: 'dep_time' %>hs </td> 	
  </tr>
  
  <tr>
    <th><%= f.label :arrival_time %></th>
    <td> <input type="text" id="arv_date_dp" class="campo_fecha_hora"/> &nbsp;-&nbsp; <%= select_time @shipment.arrival_time, prefix: 'arv_time' %>hs </td> 
  </tr>
  
  
  <tr>
    <th><%= f.label :vehicle_id %></th>
    <td> <%= f.collection_select :vehicle_id, Vehicle.joins(:vehicle_type).where(vehicle_types: {coupling_support: 0}), :id, :number_plate %>   </td>
  </tr>
  
   <tr>
    <th><%= f.label :coupled_vehicle_id %></th>
    <% if @shipment.shipping_request.service.couple_type %>
      <td> <%= f.collection_select :coupled_vehicle_id, Vehicle.where("vehicle_type_id=" + @shipment.shipping_request.service.couple_type_id.to_s), :id, :number_plate %>   </td>
    <% else %>
      <td> <%= f.collection_select :coupled_vehicle_id, Vehicle.joins(:vehicle_type).where(vehicle_types: {coupling_support: 1}), :id, :number_plate %>   </td>
      
    <% end %>
  </tr>
  
  <tr>
    <th><%= f.label :driver_id %></th>
    <td>  <%= f.collection_select :driver_id, Employee.all, :id, :last_name  %> </td>
  </tr>
  </table>
  
  <br>
  <h2> Detalles de Carga </h2>
  
  <table class="tabla_campos" cellpadding=0 cellspacing=0>
  <tr>
    <th>Tipo de Carga</th>
    <td> <%=@shipping_request.cargo_type.description %></td>
   </tr>
   <tr>
    <th>Q Total</th>
    <td> <%= @shipping_request.cargo_quantity.to_s + " " + @shipping_request.measure_unit.symbol %></td>
  </tr>
  
  
   <% @addresses = @shipping_request.customer_shipping_order.customer.addresses %>
  
  
  
  <tr> 
    <th></th>
    <td> 
  
   <% 
      msr = @shipping_request.m_shipping_request
      if msr != nil 
        if msr.m_requested_cargos != nil
          req_cargo = msr.m_requested_cargos.first 
        end
      end        
   %>
       
  
   <!--  TABLA DATOS DE CARGA -->
		
    
   <% @count_supplies = 0 %>
   
  <table id="supplies" class="tabla_grilla_edicion" cellpadding=0 cellspacing=0>
	
    <tr class="tabla_grilla_edicion_header"> <th width=100px>Lugar de Carga</th> <th width=120px>Cantidad (<%= @shipping_request.measure_unit.symbol %>)</th></tr>
    
       <!--  Mostrar puntos de carga (lugar, cantidad) segun se haya definido en el modelo de pedido -->
  
      <% if @shipment.shipment_supplies.size > 0 %>
        <% req_supplies= @shipment.shipment_supplies %>
      <% else %>
        <% 
            if req_cargo != nil
              req_supplies = req_cargo.m_requested_supplies 
            else
              req_supplies = nil
            end
        %>
      <% end %>
      
      <!-- Fila "template" con el html general que debe tener cada fila agregada dinamicamente en esta coleccion de registros -->
   
      <tr id='suppliestmp' style="display:none" > 
        <td> <%= select_tag "suppliestmp[0][address]", options_from_collection_for_select(@addresses, :id, :description), :include_blank => true %>
            <%= hidden_field_tag "suppliestmp[0][id]" %>
        </td>       
       <td> <%=  text_field_tag "suppliestmp[0][amount]"%> </td>	
      </tr>
            
	    <% 
          if req_supplies != nil
            req_supplies.each do |req_sup| 
              @count_supplies = @count_supplies + 1 
      %>
        
        <tr> <td> 
          <%= select_tag "supplies[" + @count_supplies.to_s + "][address]", options_from_collection_for_select(@addresses, :id, :description, req_sup.address_id.to_s), :include_blank => true %>
          <%= hidden_field_tag "supplies[" + @count_supplies.to_s + "][id]", req_sup.id.to_s %>
          <td> <%=  text_field_tag "supplies[" + @count_supplies.to_s + "][amount]", req_sup.amount %> </td>
        </tr>
        
        
       <% end %>
    <% end %>
   
   </table>
   <a href="javascript:agregarRegistroColeccion('supplies', ++count_supplies)">agregar</a>  
	
   
   
   <% @count_deliveries = 0 %>
   
   <table id="deliveries" class="tabla_grilla_edicion" cellpadding=0 cellspacing=0>
   
	  <tr> <td colspan=2 class="tabla_grilla_edicion_fila_sep"></td> </tr>

    
    <tr  class="tabla_grilla_edicion_header"> <th>Lugar de Entrega</th> <th>Cantidad (<%= @shipping_request.measure_unit.symbol %>)</th></tr>
 
 
    <!--  Mostrar puntos de entrega (lugar, cantidad) segun se haya definido en el modelo de pedido --> 
   
    <% if @shipment.shipment_supplies.size > 0 %>
      <% req_deliveries= @shipment.shipment_deliveries %>
    <% else %>
        <% 
            if req_cargo != nil
              req_deliveries = req_cargo.m_requested_deliveries 
            else
              req_deliveries = nil
            end
        %>
    <% end %>
  
      
      <!-- Fila "template" con el html general que debe tener cada fila agregada dinamicamente en esta coleccion de registros -->
   
      <tr id='deliveriestmp' style="display:none" > 
        <td> <%= select_tag "deliveriestmp[0][address]", options_from_collection_for_select(@addresses, :id, :description), :include_blank => true %>
            <%= hidden_field_tag "deliveriestmp[0][id]" %>
        </td>       
       <td> <%=  text_field_tag "deliveriestmp[0][amount]"%> </td>	
      </tr>
    
    
      
    <% 
        if req_deliveries != nil
          req_deliveries.each do |req_del| 
            @count_deliveries = @count_deliveries + 1 
    %>
    
      
	    <tr> <td> 
      <%= select_tag "deliveries[" + @count_deliveries.to_s + "][address]", options_from_collection_for_select(@addresses, :id, :description, req_del.address_id.to_s), :include_blank => true %>
      <%= hidden_field_tag "deliveries[" + @count_deliveries.to_s + "][id]", req_del.id.to_s %>
      </td>       
       <td> <%=  text_field_tag "deliveries[" + @count_deliveries.to_s + "][amount]", req_del.amount %> </td>	
       </tr>
       
       <% end %>
    <% end %>
   

	</table>
  
  <a href="javascript:agregarRegistroColeccion('deliveries', ++count_deliveries)">agregar</a>  
	
  </td>
  </tr>
  </table>
   
  
  <br>
  <br>
  <table class="tabla_campos" cellpadding=0 cellspacing=0>
  <tr>
    <th><%= f.label :comments %></th>
    <td> <%= f.text_area :comments, {class: "campo_comentarios"} %></td>
  </tr>
  
  <tr><td colspan=2 class="acciones_form">
  <%= f.submit t(:save), onclick: 'return validarForm();' %>

  </td>
  </tr>
  
  </table>
  
  <script>
  
    // duracion del recorrido actual
    var trip_duration = <%=@shipping_request.trip.duration_minutes %>;
     
    // contadores para saber la cantidad de registros agregados 
  
    var count_supplies = <%= @count_supplies %>;
    var count_deliveries = <%= @count_deliveries %>;
    
    // Esta funcion permite seleccionar fechas y horas de un campo datetime, mediante un campo datepicker y campos de hora.
    function datetime_to_datepicker (datetime_field, date_field, datepicker_field, time_field) {
        var datetime=$('#' + datetime_field).val().substring(0,10)
    
        $('#' + datepicker_field).val(datetime);
    
        $('#' + datepicker_field).datepicker({
          dateFormat: "yy-mm-dd",          
          altField: "#" + date_field,
          altFormat: "yy-mm-dd"        
        }); 
        
        
        $('#' + datepicker_field).datepicker("option", "dateFormat", "DD d 'de' MM, yy"); 
        
        // armo un string con el codigo javascript que al evaluarse asigna la funcion "update_datetime" 
        //  como handler del evento onchange del campo representado por la variable "fld" 
        
        strOnChangeScript = 'fld.onchange=function(){update_datetime("' + datetime_field + '", "' + date_field + '", "' + time_field + '")};'
        
        // ejecuto el codigo preparado anteriormente, para setear el handler del evento onchange en distintos campos
        
        fld=document.getElementById(datepicker_field);
        eval (strOnChangeScript);
        
        fld=document.getElementById(time_field + '_hour');
        eval (strOnChangeScript);
        
        fld=document.getElementById(time_field + '_minute');
        eval (strOnChangeScript);
 
    }
    
    // actualiza un campo "datetime" a partir de campos separados para fecha y hora (time_field_hour, time_field_minute)
    function update_datetime (datetime_field, date_field, time_field) {
    
        // Actualizo el campo en el formato correspondiente
        $('#' + datetime_field).val( $('#' + date_field).val() + ' ' + $('#' + time_field + '_hour').val() + ':' + $('#' + time_field + '_minute').val() + ':00.000000');
         
        // Si actualice el campo de hora de salida, cambio los valores y actualizo para los campos de hora de llegada segun la variable global 'trip_duration'
        if (datetime_field == "shipment_departure_time") {
                
          dep_date = $('#dep_date_dp').datepicker('getDate');
          
          dep_date.setHours ( parseInt( $('#' + time_field + '_hour').val()));
          dep_date.setMinutes ( parseInt( $('#' + time_field + '_minute').val()));
                   
          new_date = new Date (dep_date.getTime() + trip_duration*60*1000);    // Obtener la fecha hora de llegada, multiplicando los minutos de viaje
                                                                               // para obtener los milisegundos correspondientes y sumarlos a la fecha hora de salida
          
          // Actualizar campo de seleccion de fecha (datepicker)
          $('#arv_date_dp').datepicker('setDate', new_date);
          
          // Actualizar campos de seleccion de hora y minutos
          var str_val;
          str_val = getTimeStrVal (new_date.getHours());
           
          $('#' + 'arv_time' + '_hour').val(str_val);
          
          str_val = getTimeStrVal (new_date.getMinutes()); 
          $('#' + 'arv_time' + '_minute').val(str_val);
          
          // Actualizo el campo fecha-hora de llegada 
          update_datetime ("shipment_arrival_time", "arv_date", "arv_time");
        }
    }
  
  
    // devuelve un string apropiado para usar como valor en los campos de seleccion de hora y minutos, a partir de un numero
    function getTimeStrVal (num_value) {
      var str_value = num_value.toString();
      
      if (num_value < 10) {
        str_value = "0" + str_value;
      }
      
      return str_value;
    }
  
    // Agrega una fila para el ingreso de un nuevo registro, en una tabla correspondiente a una coleccion de datos, dados el nombre de la coleccion y el indice que corresponde al registro. 
    // El nombre de la coleccion pude ser el de  Puntos de Carga (supplies) o Puntos de Entrega (deliveries).
    // El indice de los campos indica el indice que se usara para los atributos name e id de los campos que se agregaran a la tabla.
    // Los nombres de los campos de un registro son de la forma  nombre_coleccion[indice_campos][nombre_campo] y los id son nombre_coleccion_indice_campos_nombre_campo.
    // Para generar la fila se utiliza una fila template, cuyo id es la concatenacion : nomColeccion + "tmp" . Los campos de dicha fila tienen como nombre de coleccion
    //  el mismo valor que el id de la fila, e indice 0. Se toma el html de esa fila y se remplaza el nombre de coleccion y el indice por los valores recibidos para armar
    // el html de la fila a insertar.
    
    function agregarRegistroColeccion (nomColeccion, indiceCampos){
    
      // obtener la tabla donde se insertara la fila para el nuevo registro
       var tabla = document.getElementById (nomColeccion);
       
       // obtener la fila "template" para generar el html de la nueva fila
       var tmp_name = nomColeccion + "tmp"
       var tmp_row = document.getElementById (tmp_name);
        
       // armar el html a partir de la fila template remplazando el indice y el nombre de la coleccion
       html =  tmp_row.innerHTML;
              
       re = new RegExp (tmp_name + "\\[0\\]" , "g" );
       html = html.replace(re, nomColeccion + "[" + indiceCampos + "]");
       
       re = new RegExp (tmp_name + "_0_" , "g" );
       html = html.replace(re, nomColeccion + "_" + indiceCampos + "_");
       
       // agregar la fila al final de la tabla y cargarle el html generado
       
       tabla.insertRow(-1);       
       var lastPos = tabla.rows.length-1;       
       var lastRow = tabla.rows[lastPos];
       
       lastRow.innerHTML = html;              
    }
  
      
  // Validaciones
  
  function validarCampoGral (idCampo, labelCampo, validacion, errores) {
      var valor = $("#" + idCampo).val();
      var valido = true;
      
      if (validacion="blank") {
        if (valor == "") {
            errores.push(labelCampo + ": " + "<%= t("errors.messages.blank") %>");
            return false;
        }
      }
      
      return valido;
  }
  
  function validarFila (nomColeccion, nroFila) {
     
     var r_address = $("#" + nomColeccion + "_" + nroFila + "_address").val();
     var r_amount = $("#" + nomColeccion + "_" + nroFila + "_amount").val();
         
     
     if ((r_address == "") && (r_amount == "") ) {
        return -1;
     }
     
     if ((r_address == "") || (r_amount == "") ) {
        return 0;
     }
     
     return 1;               
  }
      
      
  
  function validarFilas(nomLista, nomPrefijo, cantFilas, errores) {
      var i;
      var error_line = 0;
      var hayErrores = false;
      var hayDatos = false;
      var errorMsg;
      
                 
      for (i= 1; i <= cantFilas ; i++) {
        
        result = validarFila (nomPrefijo, i);
      
        if ( result == 0) {
                      
            hayErrores = true;
           
        } else {            
            
            if (result == 1) {
              hayDatos = true;
            }
        }
      }
      
      if (hayErrores) {
        errorMsg = '<%= t('invalid_lines_found')%>' + ' (' + nomLista + ')' ;
      }
      else if ( ! hayDatos ) {
       errorMsg = "<%= t 'must_fill_one_sr_line' %>" + ' (' + nomLista + ')' ;
        hayErrores = true;
      }
       
      if (hayErrores) {        
        errores.push(errorMsg);
        return false;
      }
      
     
      return true;
  }
  
  
  function validarForm () {
     
     var errores = [];
     
     validarCampoGral("shipment_departure_time", "<%= t('activerecord.attributes.shipment.departure_time') %>", 'blank', errores);
     validarCampoGral("shipment_arrival_time", "<%= t('activerecord.attributes.shipment.arrival_time') %>", 'blank', errores);
     
     validarFilas("<%= t('activerecord.models.' + 'shipment_supply' + '.other') %>", "supplies", count_supplies, errores);
     validarFilas("<%= t('activerecord.models.' + 'shipment_delivery' + '.other') %>", "deliveries", count_deliveries, errores);
     
     if (errores.length > 0 ) {
        mostrarMensajesErr(errores);
        return false;
     }
     
     return true;
  }
  
  
  function mostrarMensajesErr (errores) {  
  
    var html = "<li>"  + errores.join("</li><li>") + "</li>";       
    $("#error_list").html(html);      
    $("#error_explanation").show();
    
    var offs = $("#error_explanation").offset();
    
    window.scrollTo(offs.left-5, offs.top-5);
  }
  
      
  
	$(function() { 
        datetime_to_datepicker ('shipment_departure_time', 'dep_date', 'dep_date_dp', 'dep_time');
        datetime_to_datepicker ('shipment_arrival_time', 'arv_date', 'arv_date_dp', 'arv_time');
        
        
       // Agregar Filas para ingreso de indicaciones de carga y entrega,  en caso que no haya tipo de trabajo definido
       // (Filas con campos generadas dinamicamente, en la seccion "Detalles de Carga" , para seleccion de Lugar y Cantidad)
        
        if (count_supplies == 0) {
          javascript:agregarRegistroColeccion('supplies', ++count_supplies);
        }
     
        if (count_deliveries == 0) {
          javascript:agregarRegistroColeccion('deliveries', ++count_deliveries);
        }
        
   });
        
     
     
  </script>
  
 
  
<% end %>


